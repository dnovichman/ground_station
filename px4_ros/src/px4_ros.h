/* Auto-generated by genmsg_cpp for file /home/dnovichman/ros_workspace/px4_ros/msg/px4_ros.msg */
#ifndef PX4_ROS_MESSAGE_PX4_ROS_H
#define PX4_ROS_MESSAGE_PX4_ROS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace px4_ros
{
template <class ContainerAllocator>
struct px4_ros_ {
  typedef px4_ros_<ContainerAllocator> Type;

  px4_ros_()
  : attitude()
  , attitude_rate()
  , linear_accel()
  , RC()
  , RC_Scaled()
  , esc_rpm()
  , esc_current()
  , thrust_att_rates_sp()
  {
    attitude.assign(0.0);
    attitude_rate.assign(0.0);
    linear_accel.assign(0.0);
    RC.assign(0.0);
    RC_Scaled.assign(0.0);
    esc_rpm.assign(0.0);
    esc_current.assign(0.0);
    thrust_att_rates_sp.assign(0.0);
  }

  px4_ros_(const ContainerAllocator& _alloc)
  : attitude()
  , attitude_rate()
  , linear_accel()
  , RC()
  , RC_Scaled()
  , esc_rpm()
  , esc_current()
  , thrust_att_rates_sp()
  {
    attitude.assign(0.0);
    attitude_rate.assign(0.0);
    linear_accel.assign(0.0);
    RC.assign(0.0);
    RC_Scaled.assign(0.0);
    esc_rpm.assign(0.0);
    esc_current.assign(0.0);
    thrust_att_rates_sp.assign(0.0);
  }

  typedef boost::array<double, 3>  _attitude_type;
  boost::array<double, 3>  attitude;

  typedef boost::array<double, 3>  _attitude_rate_type;
  boost::array<double, 3>  attitude_rate;

  typedef boost::array<double, 3>  _linear_accel_type;
  boost::array<double, 3>  linear_accel;

  typedef boost::array<double, 8>  _RC_type;
  boost::array<double, 8>  RC;

  typedef boost::array<double, 8>  _RC_Scaled_type;
  boost::array<double, 8>  RC_Scaled;

  typedef boost::array<double, 4>  _esc_rpm_type;
  boost::array<double, 4>  esc_rpm;

  typedef boost::array<double, 4>  _esc_current_type;
  boost::array<double, 4>  esc_current;

  typedef boost::array<double, 4>  _thrust_att_rates_sp_type;
  boost::array<double, 4>  thrust_att_rates_sp;


  typedef boost::shared_ptr< ::px4_ros::px4_ros_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px4_ros::px4_ros_<ContainerAllocator>  const> ConstPtr;
}; // struct px4_ros
typedef  ::px4_ros::px4_ros_<std::allocator<void> > px4_ros;

typedef boost::shared_ptr< ::px4_ros::px4_ros> px4_rosPtr;
typedef boost::shared_ptr< ::px4_ros::px4_ros const> px4_rosConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::px4_ros::px4_ros_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::px4_ros::px4_ros_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace px4_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::px4_ros::px4_ros_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::px4_ros::px4_ros_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::px4_ros::px4_ros_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1d8e3384ef334d57e438d06bddc198a1";
  }

  static const char* value(const  ::px4_ros::px4_ros_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1d8e3384ef334d57ULL;
  static const uint64_t static_value2 = 0xe438d06bddc198a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::px4_ros::px4_ros_<ContainerAllocator> > {
  static const char* value() 
  {
    return "px4_ros/px4_ros";
  }

  static const char* value(const  ::px4_ros::px4_ros_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::px4_ros::px4_ros_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[3] attitude\n\
float64[3] attitude_rate\n\
float64[3] linear_accel\n\
float64[8] RC\n\
float64[8] RC_Scaled\n\
float64[4] esc_rpm\n\
float64[4] esc_current\n\
float64[4] thrust_att_rates_sp\n\
\n\
";
  }

  static const char* value(const  ::px4_ros::px4_ros_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::px4_ros::px4_ros_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::px4_ros::px4_ros_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.attitude);
    stream.next(m.attitude_rate);
    stream.next(m.linear_accel);
    stream.next(m.RC);
    stream.next(m.RC_Scaled);
    stream.next(m.esc_rpm);
    stream.next(m.esc_current);
    stream.next(m.thrust_att_rates_sp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct px4_ros_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px4_ros::px4_ros_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::px4_ros::px4_ros_<ContainerAllocator> & v) 
  {
    s << indent << "attitude[]" << std::endl;
    for (size_t i = 0; i < v.attitude.size(); ++i)
    {
      s << indent << "  attitude[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.attitude[i]);
    }
    s << indent << "attitude_rate[]" << std::endl;
    for (size_t i = 0; i < v.attitude_rate.size(); ++i)
    {
      s << indent << "  attitude_rate[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.attitude_rate[i]);
    }
    s << indent << "linear_accel[]" << std::endl;
    for (size_t i = 0; i < v.linear_accel.size(); ++i)
    {
      s << indent << "  linear_accel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.linear_accel[i]);
    }
    s << indent << "RC[]" << std::endl;
    for (size_t i = 0; i < v.RC.size(); ++i)
    {
      s << indent << "  RC[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.RC[i]);
    }
    s << indent << "RC_Scaled[]" << std::endl;
    for (size_t i = 0; i < v.RC_Scaled.size(); ++i)
    {
      s << indent << "  RC_Scaled[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.RC_Scaled[i]);
    }
    s << indent << "esc_rpm[]" << std::endl;
    for (size_t i = 0; i < v.esc_rpm.size(); ++i)
    {
      s << indent << "  esc_rpm[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.esc_rpm[i]);
    }
    s << indent << "esc_current[]" << std::endl;
    for (size_t i = 0; i < v.esc_current.size(); ++i)
    {
      s << indent << "  esc_current[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.esc_current[i]);
    }
    s << indent << "thrust_att_rates_sp[]" << std::endl;
    for (size_t i = 0; i < v.thrust_att_rates_sp.size(); ++i)
    {
      s << indent << "  thrust_att_rates_sp[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.thrust_att_rates_sp[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // PX4_ROS_MESSAGE_PX4_ROS_H

