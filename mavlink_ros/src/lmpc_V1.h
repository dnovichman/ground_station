/* Auto-generated by genmsg_cpp for file /home/dnovichman/ANU_GroundStation/lmpc_v1/msg/lmpc_V1.msg */
#ifndef LMPC_V1_MESSAGE_LMPC_V1_H
#define LMPC_V1_MESSAGE_LMPC_V1_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace lmpc_v1
{
template <class ContainerAllocator>
struct lmpc_V1_ {
  typedef lmpc_V1_<ContainerAllocator> Type;

  lmpc_V1_()
  : desired_state()
  , desired_yaw(0.0)
  , veh_state()
  {
    desired_state.assign(0.0);
    veh_state.assign(0.0);
  }

  lmpc_V1_(const ContainerAllocator& _alloc)
  : desired_state()
  , desired_yaw(0.0)
  , veh_state()
  {
    desired_state.assign(0.0);
    veh_state.assign(0.0);
  }

  typedef boost::array<double, 9>  _desired_state_type;
  boost::array<double, 9>  desired_state;

  typedef double _desired_yaw_type;
  double desired_yaw;

  typedef boost::array<double, 9>  _veh_state_type;
  boost::array<double, 9>  veh_state;


  typedef boost::shared_ptr< ::lmpc_v1::lmpc_V1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lmpc_v1::lmpc_V1_<ContainerAllocator>  const> ConstPtr;
}; // struct lmpc_V1
typedef  ::lmpc_v1::lmpc_V1_<std::allocator<void> > lmpc_V1;

typedef boost::shared_ptr< ::lmpc_v1::lmpc_V1> lmpc_V1Ptr;
typedef boost::shared_ptr< ::lmpc_v1::lmpc_V1 const> lmpc_V1ConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::lmpc_v1::lmpc_V1_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::lmpc_v1::lmpc_V1_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace lmpc_v1

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::lmpc_v1::lmpc_V1_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::lmpc_v1::lmpc_V1_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::lmpc_v1::lmpc_V1_<ContainerAllocator> > {
  static const char* value() 
  {
    return "345176bcd14c5a5c059f02ec7ba2b57a";
  }

  static const char* value(const  ::lmpc_v1::lmpc_V1_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x345176bcd14c5a5cULL;
  static const uint64_t static_value2 = 0x059f02ec7ba2b57aULL;
};

template<class ContainerAllocator>
struct DataType< ::lmpc_v1::lmpc_V1_<ContainerAllocator> > {
  static const char* value() 
  {
    return "lmpc_v1/lmpc_V1";
  }

  static const char* value(const  ::lmpc_v1::lmpc_V1_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::lmpc_v1::lmpc_V1_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[9] desired_state\n\
float64 desired_yaw\n\
float64[9] veh_state\n\
\n\
";
  }

  static const char* value(const  ::lmpc_v1::lmpc_V1_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::lmpc_v1::lmpc_V1_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::lmpc_v1::lmpc_V1_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.desired_state);
    stream.next(m.desired_yaw);
    stream.next(m.veh_state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct lmpc_V1_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lmpc_v1::lmpc_V1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::lmpc_v1::lmpc_V1_<ContainerAllocator> & v) 
  {
    s << indent << "desired_state[]" << std::endl;
    for (size_t i = 0; i < v.desired_state.size(); ++i)
    {
      s << indent << "  desired_state[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.desired_state[i]);
    }
    s << indent << "desired_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.desired_yaw);
    s << indent << "veh_state[]" << std::endl;
    for (size_t i = 0; i < v.veh_state.size(); ++i)
    {
      s << indent << "  veh_state[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.veh_state[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // LMPC_V1_MESSAGE_LMPC_V1_H

